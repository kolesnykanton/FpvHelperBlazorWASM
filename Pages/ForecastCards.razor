@using FpvHelperBlazorWASM.Models
@inject IJSRuntime JS

@if (Forecast is null)
{
    <p>⏳ Прогноз завантажується…</p>
}
else
{
    <div class="forecast-cards d-flex justify-content-between">
        @foreach (var card in Cards)
        {
            <div class="card forecast-card text-center">
                <div class="card-body p-2">
                    <!-- Дата й час -->
                    <div class="forecast-hour">
                        @card.DateTime.ToLocalTime().ToString("dd.MM.yyyy")<br />
                        @card.DateTime.ToLocalTime().ToString("HH:mm")
                    </div>

                    <!-- Іконка погоди -->
                    <div class="forecast-icon my-1">
                        @if (card.Precip >= 0.5)
                        {
                            <i class="bi bi-cloud-rain-fill"></i>
                        }
                        else if (card.Precip > 0.1)
                        {
                            <i class="bi bi-cloud-sun-rain-fill"></i>
                        }
                        else
                        {
                            <i class="bi bi-sun-fill"></i>
                        }
                    </div>

                    <!-- Температура (K → °C) -->
                    <div class="forecast-temp">
                        @Math.Round(card.Temp - 273.15, 1)°C
                    </div>

                    <!-- Вітер -->
                    <div class="forecast-wind my-1">
                        <i class="bi bi-arrow-up wind-arrow"
                           style="transform:rotate(@card.WindDir deg)"></i>
                        <span class="small">@Math.Round(card.WindSpeed, 1) м/с</span>
                    </div>

                    <!-- Опади (мм за 3 год) -->
                    <div class="forecast-precip small text-info">
                        @Math.Round(card.Precip, 1) мм
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter] public PointForecastResponse? Forecast { get; set; }

    class CardPoint
    {
        public DateTimeOffset DateTime { get; set; }
        public double Temp { get; set; }
        public double WindSpeed { get; set; }
        public double WindDir { get; set; }
        public double Precip { get; set; }
    }

    List<CardPoint> Cards = new();

    protected override void OnParametersSet()
    {
        Cards.Clear();
        if (Forecast is null) return;

        // біжучий Unix‑ms "зараз" саме з Forecast.Ts[0]
        var baseTs = Forecast.Ts[0];
        // потрібні інтервали: 0 (зараз), +1, +3, +6, +12 год
        var offsets = new[] { 0, 1, 3, 6, 12 };

        foreach (var h in offsets)
        {
            int idx;
            if (h == 0)
            {
                // зараз — завжди перша точка прогнозу
                idx = 0;
            }
            else
            {
                // шукаємо першу мітку ≥ baseTs + h год
                var target = baseTs + h * 3600_000L;
                idx = Array.FindIndex(Forecast.Ts, ts => ts >= target);
                if (idx < 0)
                {
                    // якщо нема, беремо останню (найдальшу)
                    idx = Forecast.Ts.Length - 1;
                }
            }

            Cards.Add(new CardPoint
                {
                    DateTime = DateTimeOffset.FromUnixTimeMilliseconds(Forecast.Ts[idx]),
                    Temp = Forecast.TempSurface[idx],
                    WindSpeed = Forecast.WindSpeed[idx],
                    WindDir = Forecast.WindDir[idx],
                    Precip = Forecast.PrecipSurface[idx]
                });
        }
    }

}
