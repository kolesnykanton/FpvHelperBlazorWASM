@page "/windy"
@inject IJSRuntime JS
@inject HttpClient Http
@using FpvHelperBlazorWASM.Models
@using System.Text
@using FpvHelperBlazorWASM.Serialization

<h3>Windy Map + Point Forecast</h3>

<div class="d-flex flex-wrap">
    <div id="windy" style="height:600px; flex:1 1 60%; min-width:300px;"></div>

    <div class="weather-box p-3 flex:1 1 30%; min-width:200px;">
        <ForecastCards Forecast="forecast" />
    </div>
</div>

@code {
    private PointForecastResponse? forecast;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await JS.InvokeVoidAsync("initializeWindyMap");
        var coords = await JS.InvokeAsync<GeoCoords>("getUserLocation");
        await LoadPointForecast(coords.Lat, coords.Lon);
        StateHasChanged();
    }

    private async Task LoadPointForecast(double lat, double lon)
{
  var req = new PointForecastRequest {
    lat = lat,
    lon = lon,
    model = "gfs",
    parameters = new[] { "temp","wind","windGust","precip" },
    levels     = new[] { "surface" },
    key        = "<PointForecastKey>"
  };

  // СЕРІАЛІЗУЄМО через source‑gen контекст
  var json = JsonSerializer.Serialize(
    req,
    WindyJsonContext.Default.PointForecastRequest);

  using var content = new StringContent(json, Encoding.UTF8, "application/json");
  using var resp    = await Http.PostAsync(
    "https://api.windy.com/api/point-forecast/v2", content);
  resp.EnsureSuccessStatusCode();

  // ДЕСЕРІАЛІЗУЄМО через той самий контекст
  await using var stream = await resp.Content.ReadAsStreamAsync();
  forecast = await JsonSerializer.DeserializeAsync<PointForecastResponse>(
    stream,
    WindyJsonContext.Default.PointForecastResponse);
}
}
